/*
* Project:  Feographia
* Purpose:  Mobile application to work with the biblical text
* Authors:  NikitaFeodonit, nfeodonit@yandex.com
* ****************************************************************************
* Copyright (C) 2015 NikitaFeodonit
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

import org.gradle.internal.os.OperatingSystem;


apply plugin: 'com.android.model.application'


model {
    android {
        defaultConfig.with {
            applicationId = "ru.feographia"
            versionCode = 1
            versionName = "0.1"
        }

        compileSdkVersion = 23
        buildToolsVersion = "23.0.1"

        defaultConfig.with {
            minSdkVersion.apiLevel = 9
            targetSdkVersion.apiLevel = compileSdkVersion.asType(Integer)
        }
    }


    android.buildTypes {
        release {
            minifyEnabled = false
            proguardFiles.add(file('proguard-rules.pro'))

// TODO: not work with new experimental gradle
//            applicationVariants.all { variant ->
//                variant.outputs.each { output ->
//                    output.outputFile = new File(output.outputFile.parent, "feographia_" + defaultConfig.versionName + ".apk")
//                }
//            }
        }
    }
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
//    compile project(':fcore')
    compile project(':jzmq')
    compile project(':capnproto-java')
    compile 'com.android.support:appcompat-v7:23.0.1'
    compile 'com.android.support:support-v4:23.0.1'
}

//
//
//
// capnproto Java


model {
    android {
        tasks.withType(JavaCompile) {
            // uncomment it if <Feographia_Android>/fcore/src/fcore/capnproto/*.capnp are modified
//            compileTask -> compileTask.dependsOn capnpJavaBuild
        }

        task capnpJavaBuild(type: Exec) {
            workingDir file('src/main/java/ru/feographia/capnproto')
            println workingDir
            commandLine getShell(), getShellArg(), getCapnpCmd()
            println commandLine
        }
    }
}

//
//
//
// native fcore
//
//
//
// depends on CrystaX 10.3+, in local.properties must be
// ndk.dir=<path to crystax-ndk-10.3.x>
//
//
//
// http://ph0b.com/new-android-studio-ndk-support/


model {
// for new experimental gradle version 0.4.0
// http://stackoverflow.com/a/31805506
//    manifest.srcFile = 'main/AndroidManifest.xml'
//    android.sources {
//        main {
//            manifest.source {
//                srcDir 'main'
//                include 'AndroidManifest.xml'
//            }
//            java.source.srcDirs = ['src/main/java']
//        }
//    }

// all android.sources values
// (from sources,
// http://jcenter.bintray.com/com/android/tools/build/gradle-experimental/0.4.0/gradle-experimental-0.4.0-sources.jar
// )
//    android.sources {
//        main {
//            manifest.source.srcFile = 'main/AndroidManifest.xml'
//
//            java.source.srcDirs = ['src/main/jni', '../../../common']
//            res.source.srcDirs = ['src/main/jni', '../../../common']
//            assets.source.srcDirs = ['src/main/jni', '../../../common']
//
//            jni.source.srcDirs = ['src/main/jni', '../../../common']
//            jniLibs.source.srcDirs = ['src/main/jni', '../../../common']
//
//            resources.source.srcDirs = ['src/main/jni', '../../../common']
//            aidl.source.srcDirs = ['src/main/jni', '../../../common']
//            renderscript.source.srcDirs = ['src/main/jni', '../../../common']
//
// form old version // sourceSets.androidTest.setRoot('src/androidTest') // tests
//        }
//    }

    android.sources {
        main {
            jni.source.srcDirs = [
                    "${getFcoreModuleDir()}/src",
                    "${getImportedLibsDir()}"
            ]
        }
    }
}

//
//
//
// capnproto C++


model {
    android {
        tasks.withType(JavaCompile) {
            // uncomment it if <Feographia_Android>/fcore/src/fcore/capnproto/*.capnp are modified
//            compileTask -> compileTask.dependsOn capnpFcoreBuild
        }

        task capnpFcoreBuild(type: Exec) {
            workingDir file("${getFcoreModuleDir()}/src/fcore/capnproto")
            commandLine getShell(), getShellArg(), getCapnpCmd()
        }
    }
}

//
//
//
// see used flags by the compilation
// <Feographia>/build/tmp/compileArmeabi-v7a<Debug|Release>FcoreSharedLibraryFcoreMainC/options.txt
// <Feographia>/build/tmp/compileArmeabi-v7a<Debug|Release>FcoreSharedLibraryFcoreMainCpp/options.txt
// <Feographia>/build/tmp/linkArmeabi-v7a<Debug|Release>FcoreSharedLibrary/options.txt

// ndk-build debug output for used flags
// ndk-build[.cmd] V=1

//
//
//

//final APP_ABIS = ["armeabi", "armeabi-v7a", "x86"]
final APP_ABIS = ["armeabi-v7a"]

final BOOST_STATIC_LIBS = [
        "boost_log",
        "boost_chrono",
        "boost_thread",
        "boost_date_time",
        "boost_filesystem",
        "boost_regex",
        "boost_system"]


def getToolchainVersion()
{
    return "5"
}


def getBoostVersion()
{
    return "1.59.0"
}


model {
    android.ndk {
        moduleName = "fcore"

//        debuggable = true
//        renderscriptNdkMode = false

        platformVersion = 9

        toolchain = "gcc"
        toolchainVersion = getToolchainVersion()

        // http://developer.android.com/ndk/guides/cpp-support.html#runtimes
        // file:///<path to ndk>/docs/Programmers_Guide/html/md_3__key__topics__building__a_p_p_l_i_c_a_t_i_o_n-_m_k.html
// TODO: make all (vars, methods) for shared, but boost must be only static
//        stl = "gnustl_shared"
        stl = "gnustl_static"

//  ===  CFlags  ===

        CFlags.add("-DSQLITE_THREADSAFE=2")
        CFlags.add("-I" + "${getLibsDir()}/sqlite/src")
        CFlags.add("-I" + "${getCrystaxIncDir()}")

//  ===  cppFlags  ===

//        cppFlags.add("-Wall")
        cppFlags.add("-fexceptions")
        cppFlags.add("-frtti")
        cppFlags.add("-std=c++11")

        cppFlags.add("-I" + "${getFcoreModuleDir()}/src")
        cppFlags.add("-I" + "${getLibsDir()}/SQLiteCpp/src/include")
        cppFlags.add("-I" + "${getLibsDir()}/sqlite/src")
        cppFlags.add("-I" + "${getLibsPrebuiltDir()}/capnproto-cpp/include")
        cppFlags.add("-I" + "${getLibsPrebuiltDir()}/zeromq/include")

        cppFlags.add("-I" + "${getBoostIncDir()}")
        cppFlags.add("-I" + "${getCrystaxIncDir()}")

//  ===  ldFlags  ===

        ldFlags.add("" + "${getLibsPrebuiltDir()}/capnproto-cpp/lib/libcapnp.a")
        ldFlags.add("" + "${getLibsPrebuiltDir()}/capnproto-cpp/lib/libkj.a")

        ldFlags.add("-Wl,--whole-archive")
        ldFlags.add("" + "${getLibsPrebuiltDir()}/zeromq/lib/libjzmq.a")
        ldFlags.add("-Wl,--no-whole-archive")
        ldFlags.add("" + "${getLibsPrebuiltDir()}/zeromq/lib/libzmq.a")

        ldFlags.add("-llog")

        ldFlags.add("-L" + "${getNdkDir()}/sources/crystax/empty")
    }


    android.productFlavors {
        APP_ABIS.each { abi ->
            create(getFlavorName(abi)) {
                ndk.with {

                    abiFilters.add(abi)

                    def libs = [:]
                    BOOST_STATIC_LIBS.each { name ->
                        libs[name] = "${getBoostLibDir(abi)}/lib${name}.a"
                    }
                    libs.gnustl_static = getGnuStlStaticLib(abi)
                    libs.crystax = getCrystaxLib(abi)

                    libs.each { name, file ->
                        ldFlags.add("" + "${file}")
                    }
                }
            }
        }
    }
}


def getFcoreModuleDir()
{
    return "${rootDir}/fcore"
}


def getImportedLibsDir()
{
    return "${getFcoreModuleDir()}/imported"
}


def getLibsDir()
{
    return "${getImportedLibsDir()}/libs"
}


def getLibsPrebuiltDir()
{
    return "${getImportedLibsDir()}/libs_prebuilt"
}


def getFlavorName(abi)
{
    switch (abi) {
        case "armeabi":
            return "arm";
        case "armeabi-v7a":
            return "arm7"
        case "arm64-v8a":
            return "arm64"
        default:
            return abi.replaceAll('-', '_')
    }
}


def getToolchainName(abi)
{
    switch (abi) {
        case ~/^armeabi.*/:
            return "arm-linux-androideabi"
        case ~/^arm64.*/:
            return "aarch64-linux-android"
        case "mips":
            return "mipsel-linux-android"
        case "mips64":
            return "mips64el-linux-android"
        case ["x86", "x86_64"]:
            return abi
        default:
            throw new GradleException("Unsupported ABI: '${abi}'")
    }
}


def getToolchainPrefix(abi)
{
    switch (abi) {
        case ~/^armeabi.*/:
            return "arm-linux-androideabi"
        case ~/^arm64.*/:
            return "aarch64-linux-android"
        case "mips":
            return "mipsel-linux-android"
        case "mips64":
            return "mips64el-linux-android"
        case "x86":
            return "i686-linux-android"
        case "x86_64":
            return "x86_64-linux-android"
        default:
            throw new GradleException("Unsupported ABI: '${abi}'")
    }
}


def getHostOS()
{
    if (OperatingSystem.current().isLinux()) {
        return "linux"
    }
    if (OperatingSystem.current().isMacOsX()) {
        return "darwin"
    }
    if (OperatingSystem.current().isWindows()) {
        return "windows"
    }
    throw new GradleException("Unsupported host OS")
}


def getHostArch()
{
    def arch = System.getProperty("os.arch")
    switch (arch) {
        case ["x86_64", "amd64"]:
            return "x86_64"
        case ~/^i[3456]86/:
        case "x86":
            return "x86"
        default:
            throw new GradleException("Can't detect host's CPU architecture: '${arch}'")
    }
}


def getHostTag()
{
    def tag = getHostOS()
    def arch = getHostArch()
    if (tag != "windows" || arch != "x86") {
        tag += "-${arch}"
    }
    return tag
}


def getNdkDir()
{
    if (System.env.ANDROID_NDK_ROOT != null) {
        return System.env.ANDROID_NDK_ROOT
    }

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkdir = properties.getProperty('ndk.dir', null)
    if (ndkdir == null) {
        throw new GradleException("""\
                NDK location not found.
                Define location with ndk.dir in the local.properties file
                or with an ANDROID_NDK_ROOT environment variable.""")
    }

    return ndkdir
}


def getNdkBuildCmd()
{
    def ndkbuild = getNdkDir() + "/ndk-build"
    if (OperatingSystem.current().isWindows()) {
        ndkbuild += ".cmd"
    }
    return ndkbuild
}


def getCrystaxNdkDir()
{
    def ndkDir = getNdkDir()
    if (!(new File(ndkDir, "sources/crystax").exists())) {
        throw new GradleException("""\
            '${ndkDir}' is not a CrystaX NDK.
            Edit ndk.dir in local.properties or set ANDROID_NDK_ROOT
            environment variable pointing to CrystaX NDK""")
    }

    return ndkDir
}


def getCrystaxDir()
{
    return "${getCrystaxNdkDir()}/sources/crystax"
}


def getCrystaxIncDir()
{
    return "${getCrystaxDir()}/include"
}


def getCrystaxLibDir(abi)
{
    return "${getCrystaxDir()}/libs/${abi}"
}


def getCrystaxLib(abi)
{
    return "${getCrystaxLibDir(abi)}/libcrystax.a"
}


def getGnuStlStaticLib(abi)
{
    return "${getCrystaxNdkDir()}/sources/cxx-stl/gnu-libstdc++/${getToolchainVersion()}/libs/${abi}/libgnustl_static.a"
}


def getBoostDir()
{
    return "${getCrystaxNdkDir()}/sources/boost/${getBoostVersion()}"
}


def getBoostIncDir()
{
    return "${getBoostDir()}/include"
}


def getBoostLibDir(abi)
{
    return "${getBoostDir()}/libs/${abi}/gnu-${getToolchainVersion()}"
}


def getPrebuiltLibPaths(abi)
{
    def paths = []
    paths += getBoostLibDir(abi)
    paths += getCrystaxLibDir(abi)
    return paths
}


def getStripExecutable(abi)
{
    def ndk = getCrystaxNdkDir()
    def toolchainName = getToolchainName(abi)
    def toolchainPrefix = getToolchainPrefix(abi)
    def toolchainVersion = getToolchainVersion()
    def hostTag = getHostTag()
    def strip = "${ndk}/toolchains/${toolchainName}-${toolchainVersion}/prebuilt/${hostTag}/bin/${toolchainPrefix}-strip"
    if (OperatingSystem.current().isWindows()) {
        strip = strip.replaceAll('/', '\\\\') + '.exe'
    }
    return strip
}


def getTargetLibDir(abi, buildType)
{
    return "${buildDir}/intermediates/binaries/${buildType}/${getFlavorName(abi)}/lib/${abi}"
}


def getShell()
{
    if (OperatingSystem.current().isWindows()) {
        return "cmd"
    } else {
        return "sh"
    }
}


def getShellArg()
{
    if (OperatingSystem.current().isWindows()) {
        return "/c"
    } else {
        // TODO: for Linux, MacOsX
        return ""
    }
}


def getCapnpCmd()
{
    // TODO: make capnp-main.sh for Linux, MacOsX
    def capnpCmd = "${rootDir}/fcore/src/fcore/capnproto/capnp-main"
    if (OperatingSystem.current().isWindows()) {
        capnpCmd = capnpCmd.replaceAll('/', '\\\\') + '.cmd'
    } else {
        capnpCmd += '.sh'
    }
    return capnpCmd
}
